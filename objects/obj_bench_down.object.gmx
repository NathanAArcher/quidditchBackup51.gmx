<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_bench_down</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize()
depth = x-y
bench_color = c_white
if(room == rm_alt){
    //bench_color = global.team1_color
}
if(room == rm_tutorial_alt){
    exit
}
bench_array[0] = -1
bench_color[0] = c_white
bench_sprites[0] = -1
self_id = 0
skin_array[0] = -1
sprite_head = 0
bench_ids[0] = -1
for(i = 0; i &lt; 16; i+= 1){ //fill initial list with empty spaces
    skin_array[i] = -1
    bench_sprites[i] = -1
    bench_id[i] = -1
}

for(i = 0; i &lt; 16; i += 1){
    randomize()
    self_id = irandom(global.player_max)
    bench_id[i] = self_id
    //draw_sprite_ext(sprite_head, argument1, argument2, argument3, argument4, argument5, argument6, argument7, argument8)
    //bench_sprites[i] = scr_load_smallheads(irandom(global.player_max))
    scr_load_smallheads(self_id) //sets sprite head to self_id
    //bench_sprites[i] = sprite_add(working_directory+"\player_heads\spr_player"+string(self_id+1)+"_head_strip8.png", 8, true, false, 16, 24)
    //bench_sprites[i] = sprite_add(working_directory+"\player_heads\spr_player"+string(irandom(self_id)+1)+"_head_strip8.png", 8, true, false, 16, 24)
    bench_sprites[i] = sprite_head
    //bench_sprites[i] = scr_load_smallheads(5)
    skin_array[i] = scr_getskin(-1)
    bench_color[i] = choose(global.team1_color, global.team2_color) //depending on wins/losses should have more of team1 color
    if(irandom(5) == 1 or global.wins+global.losses == 0){
        bench_color[i] = make_color_rgb(irandom(255), irandom(255), irandom(255))
    }else{
        if global.losses &gt; 0 and global.wins &gt; 0{
            if random(1) &gt; (global.wins/(global.wins+global.losses)){
                bench_color[i] = global.team2_color
            }else{
                bench_color[i] = global.team1_color
            }
        }
        if global.wins == 0{
            bench_color[i] = make_color_rgb(irandom(255), irandom(255), irandom(255))
        }
        
    }
    
    if(irandom(12)-1 &gt; global.wins){
        skin_array[i] = -1 //draw blank space
        bench_id[i] = -1
    }
}

for(i = 0; i &lt; 8; i += 1){
    //bench_sprites[i] = scr_load_smallheads(bench_array[i])
}

depth = -y
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self()
if(room == rm_tutorial_alt){
    exit
}
for(i = 0; i &lt; 8; i += 1){
    if(skin_array[i] != -1 and bench_sprites[i] != -1){ //if skin_array[i] == -1, then it should be an empty spot
        draw_sprite_ext(spr_audience_member_down, -1, x+15*i+8, y-4, 1, 1, 0, c_white, 1)
        draw_sprite_ext(spr_audience_member_down_shirt, -1, x+15*i+8, y-4, 1, 1, 0, bench_color[i], 1)
        draw_sprite_ext(spr_audience_member_down_skin, -1, x+15*i+8, y-4, 1, 1, 0, skin_array[i], 1)
        scr_draw_smallheads_argument(bench_sprites[i], 6, x+15*i+8, y-4, 1, 1, 0, c_white, 1)
        //draw_sprite_ext(bench_sprites[i], 270, x+15*i+8, y-4, 1, 1, 0, c_white, 1)
    }
}
for(i = 8; i &lt; 16; i += 1){
    if(skin_array[i] != -1 and bench_sprites[i] != -1){
        draw_sprite_ext(spr_audience_member_down, -1, x+15*(i-8)+16, y+12, 1, 1, 0, c_white, 1)
        draw_sprite_ext(spr_audience_member_down_shirt, -1, x+15*(i-8)+16, y+12, 1, 1, 0, bench_color[i], 1)
        draw_sprite_ext(spr_audience_member_down_skin, -1, x+15*(i-8)+16, y+12, 1, 1, 0, skin_array[i], 1)
        scr_draw_smallheads_argument(bench_sprites[i], 6, x+15*(i-8)+16, y+12, 1, 1, 0, c_white, 1)
        //draw_sprite_ext(bench_sprites[i], 270, x+15*(i-8)+16, y+12, 1, 1, 0, c_white, 1)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
