<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_tab</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//deforoff = 1
//presetindex = 1
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>541</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sprite_set</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>5</kind>
            <sprite>spr_tab</sprite>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="11">
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>visible</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>true</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>801</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_cursor</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>5</kind>
            <sprite>spr_cursor2</sprite>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.presetindex</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>self.presetindex</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_controller</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room == rm_menu{
    global.wins = 0
    global.losses = 0
}

global.chasers = 0
global.keepers = 0
global.beaters = 0
global.seekers = 0

if global.threedmode == true{
    xmodifier = .5 //multiplied by this factor to accurately place players at positions. The strategy-setting room is half the area of the pitch, hence the locations are multiplied by 1/2
    ymodifier = .5
    xintercept = -160
}else{
    xmodifier = 1
    ymodifier = 1
    xintercept = 0
}


var fulltext = ""

var i, file;
if(room == rm_playmaker or room == rm_playmaker_alt){
    file = file_text_open_read(working_directory + "\data\defpresets" + string(global.presetindex) + ".txt");
}else{
    file = file_text_open_read(working_directory + "\data\offpresets" + string(global.presetindex) + ".txt");
}
for (i = 0; i &lt; 10; i += 1)
   {
   fulltext += file_text_read_string(file);
   file_text_readln(file);
   //scr[i] = file_text_read_real(file);
   //file_text_readln(file);
   //scr_name[i] = file_text_read_string(file);
   //file_text_readln(file);
   }
file_text_close(file);

//show_message(fulltext)

var substring = ""

var chaser1X = 0
var chaser1Y = 0
var chaser1DefType = 0
var chaser1ZoneSize = 0

var chaser2X = 0
var chaser2Y = 0
var chaser2DefType = 0
var chaser2ZoneSize = 0

var chaser3X = 0
var chaser3Y = 0
var chaser3DefType = 0
var chaser3ZoneSize = 0

var keeper1X = 0
var keeper1Y = 0
var keeper1DefType = 0
var keeper1ZoneSize = 0

var beater1X = 0
var beater1Y = 0
var beater1DefType = 0
var beater1ZoneSize = 0

var beater2X = 0
var beater2Y = 0
var beater2DefType = 0
var beater2ZoneSize = 0

var j = 0;
var k = 0;

if(room == rm_playmaker_alt or room == rm_playmaker){

    for(j = 0; i &lt; 10000; j += 1){ //says i &lt; 100000 but really it'll go on forever because i won't increase
        if(string_char_at(fulltext, j) == "c"){
            substring = ""
            //chaser
            if(string_char_at(fulltext, j+6) == "1"){
                ////show_message("1 found at " + string(i+6))
                k = 0
                //character at i+9 will be the first number of the x location
                j = j+9
                while(k &lt; 4){
                    substring = ""
                    ////show_message("k = " + string(k))
                    while(true){//while(string_char_at(fulltext, j) != "."){ //just go forever
                        if(string_char_at(fulltext, j) == ","){ //no more numbers
                            ////show_message("comma found at " + string(j) + "; substring: " + string(substring))
                            if(k == 0){
                                chaser1X = real(substring)
                                ////show_message("chaser1X = " + string(chaser1X))
                            }
                            if(k == 1){
                                chaser1Y = real(substring)
                                ////show_message("chaser1Y = " + string(chaser1Y))
                            }
                            if(k == 2){
                                chaser1DefType = real(substring)
                            }
                            if(k == 3){
                                chaser1ZoneSize = real(substring)
                            }
                            k+= 1
                            j+= 2 //move pointer to next number, which will by the y location
                            break;
                        }else{
                            ////show_message("#: " + string_char_at(fulltext, j))
                            substring += string_char_at(fulltext, j)
                        }
                        j+= 1
                    }
                }
                //show_message("chaser1: " + string(chaser1X) + "," + string(chaser1Y) + "," + string(chaser1DefType) + "," + string(chaser1ZoneSize))
                j -= 9
                //show_message("Remaining string: " + string_copy(fulltext, j, string_length(fulltext)-1))
            }
            //repeat for chaser2, chaser3, and so on        
    
            if(string_char_at(fulltext, j+6) == "2"){
                ////show_message("1 found at " + string(i+6))
                k = 0
                //character at i+9 will be the first number of the x location
                j = j+9
                while(k &lt; 4){
                    substring = ""
                    while(true){
                        if(string_char_at(fulltext, j) == ","){ //no more numbers
                            ////show_message("comma found at " + string(j) + "; substring: " + string(substring))
                            if(k == 0){
                                chaser2X = real(substring)
                            }
                            if(k == 1){
                                chaser2Y = real(substring)
                            }
                            if(k == 2){
                                chaser2DefType = real(substring)
                            }
                            if(k == 3){
                                chaser2ZoneSize = real(substring)
                            }
                            k+= 1
                            j+= 2 //move pointer to next number, which will by the y location
                            break;
                        }else{
                            substring += string_char_at(fulltext, j)
                        }
                        j+= 1
                    }
                }
                //show_message("chaser2: " + string(chaser2X) + "," + string(chaser2Y) + "," + string(chaser2DefType) + "," + string(chaser2ZoneSize))
                j -= 9
                //show_message("Remaining string: " + string_copy(fulltext, j, string_length(fulltext)-1))
            }
            
            if(string_char_at(fulltext, j+6) == "3"){
                ////show_message("1 found at " + string(i+6))
                k = 0
                //character at i+9 will be the first number of the x location
                j = j+9
                while(k &lt; 4){
                    substring = ""
                    while(true){
                        if(string_char_at(fulltext, j) == ","){ //no more numbers
                            ////show_message("comma found at " + string(j) + "; substring: " + string(substring))
                            if(k == 0){
                                chaser3X = real(substring)
                            }
                            if(k == 1){
                                chaser3Y = real(substring)
                            }
                            if(k == 2){
                                chaser3DefType = real(substring)
                            }
                            if(k == 3){
                                chaser3ZoneSize = real(substring)
                            }
                            k+= 1
                            j+= 2 //move pointer to next number, which will by the y location
                            break;
                        }else{
                            substring += string_char_at(fulltext, j)
                        }
                        j+= 1
                    }
                }
                //show_message("chaser3: " + string(chaser3X) + "," + string(chaser3Y) + "," + string(chaser3DefType) + "," + string(chaser3ZoneSize))
                j -= 9
                //show_message("Remaining string: " + string_copy(fulltext, j, string_length(fulltext)-1))
            }
        }
        if(string_char_at(fulltext, j) == "k"){
            substring = ""
            //chaser
            if(string_char_at(fulltext, j+6) == "1"){
                ////show_message("1 found at " + string(i+6))
                k = 0
                //character at i+9 will be the first number of the x location
                j = j+9
                while(k &lt; 4){
                    substring = ""
                    while(true){//while(string_char_at(fulltext, j) != "."){ //just go forever
                        if(string_char_at(fulltext, j) == ","){ //no more numbers
                            ////show_message("comma found at " + string(j) + "; substring: " + string(substring))
                            if(k == 0){
                                keeper1X = real(substring)
                            }
                            if(k == 1){
                                keeper1Y = real(substring)
                            }
                            if(k == 2){
                                keeper1DefType = real(substring)
                            }
                            if(k == 3){
                                keeper1ZoneSize = real(substring)
                            }
                            k+= 1
                            j+= 2 //move pointer to next number, which will by the y location
                            break;
                        }else{
                            ////show_message("#: " + string_char_at(fulltext, j))
                            substring += string_char_at(fulltext, j)
                        }
                        j+= 1
                    }
                }
                //show_message("keeper1: " + string(keeper1X) + "," + string(keeper1Y) + "," + string(keeper1DefType) + "," + string(keeper1ZoneSize))
                j -= 9
                //show_message("Remaining string: " + string_copy(fulltext, j, string_length(fulltext)-1))
            }
        }
        if(string_char_at(fulltext, j) == "b"){
            substring = ""
            //beater
            if(string_char_at(fulltext, j+6) == "1"){
                ////show_message("1 found at " + string(i+6))
                k = 0
                //character at i+9 will be the first number of the x location
                j = j+9
                while(k &lt; 4){
                    substring = ""
                    while(true){//while(string_char_at(fulltext, j) != "."){ //just go forever
                        if(string_char_at(fulltext, j) == ","){ //no more numbers
                            ////show_message("comma found at " + string(j) + "; substring: " + string(substring))
                            if(k == 0){
                                beater1X = real(substring)
                            }
                            if(k == 1){
                                beater1Y = real(substring)
                            }
                            if(k == 2){
                                beater1DefType = real(substring)
                            }
                            if(k == 3){
                                beater1ZoneSize = real(substring)
                            }
                            k+= 1
                            j+= 2 //move pointer to next number, which will by the y location
                            break;
                        }else{
                            ////show_message("#: " + string_char_at(fulltext, j))
                            substring += string_char_at(fulltext, j)
                        }
                        j+= 1
                    }
                }
                //show_message("beater1: " + string(beater1X) + "," + string(beater1Y) + "," + string(beater1DefType) + "," + string(beater1ZoneSize))
                j -= 9
                //show_message("Remaining string: " + string_copy(fulltext, j, string_length(fulltext)-1))
            }
            
            if(string_char_at(fulltext, j+6) == "2"){
                ////show_message("1 found at " + string(i+6))
                k = 0
                //character at i+9 will be the first number of the x location
                j = j+9
                while(k &lt; 4){
                    substring = ""
                    while(true){//while(string_char_at(fulltext, j) != "."){ //just go forever
                        if(string_char_at(fulltext, j) == ","){ //no more numbers
                            ////show_message("comma found at " + string(j) + "; substring: " + string(substring))
                            if(k == 0){
                                beater2X = real(substring)
                            }
                            if(k == 1){
                                beater2Y = real(substring)
                            }
                            if(k == 2){
                                beater2DefType = real(substring)
                            }
                            if(k == 3){
                                beater2ZoneSize = real(substring)
                            }
                            k+= 1
                            j+= 2 //move pointer to next number, which will by the y location
                            break;
                        }else{
                            ////show_message("#: " + string_char_at(fulltext, j))
                            substring += string_char_at(fulltext, j)
                        }
                        j+= 1
                    }
                }
                //show_message("beater2: " + string(beater2X) + "," + string(beater2Y) + "," + string(beater2DefType) + "," + string(beater2ZoneSize))
                break;
            }
        }
    }

}

if room == rm_offense or rm_offense_alt{
    for(j = 0; i &lt; 10000; j += 1){ //says i &lt; 100000 but really it'll go on forever because i won't increase
        if(string_char_at(fulltext, j) == "c"){
            substring = ""
            //chaser
            if(string_char_at(fulltext, j+6) == "1"){
                ////show_message("1 found at " + string(i+6))
                k = 0
                //character at i+9 will be the first number of the x location
                j = j+9
                while(k &lt; 2){
                    substring = ""
                    ////show_message("k = " + string(k))
                    while(true){//while(string_char_at(fulltext, j) != "."){ //just go forever
                        if(string_char_at(fulltext, j) == ","){ //no more numbers
                            ////show_message("comma found at " + string(j) + "; substring: " + string(substring))
                            if(k == 0){
                                chaser1X = real(substring)
                                ////show_message("chaser1X = " + string(chaser1X))
                            }
                            if(k == 1){
                                chaser1Y = real(substring)
                                ////show_message("chaser1Y = " + string(chaser1Y))
                            }
                            if(k == 2){
                                chaser1DefType = real(substring)
                            }
                            if(k == 3){
                                chaser1ZoneSize = real(substring)
                            }
                            k+= 1
                            j+= 2 //move pointer to next number, which will by the y location
                            break;
                        }else{
                            ////show_message("#: " + string_char_at(fulltext, j))
                            substring += string_char_at(fulltext, j)
                        }
                        j+= 1
                    }
                }
                //show_message("chaser1: " + string(chaser1X) + "," + string(chaser1Y) + "," + string(chaser1DefType) + "," + string(chaser1ZoneSize))
                j -= 9
                //show_message("Remaining string: " + string_copy(fulltext, j, string_length(fulltext)-1))
            }
            //repeat for chaser2, chaser3, and so on        
    
            if(string_char_at(fulltext, j+6) == "2"){
                ////show_message("1 found at " + string(i+6))
                k = 0
                //character at i+9 will be the first number of the x location
                j = j+9
                while(k &lt; 2){
                    substring = ""
                    while(true){
                        if(string_char_at(fulltext, j) == ","){ //no more numbers
                            ////show_message("comma found at " + string(j) + "; substring: " + string(substring))
                            if(k == 0){
                                chaser2X = real(substring)
                            }
                            if(k == 1){
                                chaser2Y = real(substring)
                            }
                            if(k == 2){
                                chaser2DefType = real(substring)
                            }
                            if(k == 3){
                                chaser2ZoneSize = real(substring)
                            }
                            k+= 1
                            j+= 2 //move pointer to next number, which will by the y location
                            break;
                        }else{
                            substring += string_char_at(fulltext, j)
                        }
                        j+= 1
                    }
                }
                //show_message("chaser2: " + string(chaser2X) + "," + string(chaser2Y) + "," + string(chaser2DefType) + "," + string(chaser2ZoneSize))
                j -= 9
                //show_message("Remaining string: " + string_copy(fulltext, j, string_length(fulltext)-1))
            }
            
            if(string_char_at(fulltext, j+6) == "3"){
                ////show_message("1 found at " + string(i+6))
                k = 0
                //character at i+9 will be the first number of the x location
                j = j+9
                while(k &lt; 2){
                    substring = ""
                    while(true){
                        if(string_char_at(fulltext, j) == ","){ //no more numbers
                            ////show_message("comma found at " + string(j) + "; substring: " + string(substring))
                            if(k == 0){
                                chaser3X = real(substring)
                            }
                            if(k == 1){
                                chaser3Y = real(substring)
                            }
                            if(k == 2){
                                chaser3DefType = real(substring)
                            }
                            if(k == 3){
                                chaser3ZoneSize = real(substring)
                            }
                            k+= 1
                            j+= 2 //move pointer to next number, which will by the y location
                            break;
                        }else{
                            substring += string_char_at(fulltext, j)
                        }
                        j+= 1
                    }
                }
                //show_message("chaser3: " + string(chaser3X) + "," + string(chaser3Y) + "," + string(chaser3DefType) + "," + string(chaser3ZoneSize))
                j -= 9
                //show_message("Remaining string: " + string_copy(fulltext, j, string_length(fulltext)-1))
            }
        }
        if(string_char_at(fulltext, j) == "k"){
            substring = ""
            //chaser
            if(string_char_at(fulltext, j+6) == "1"){
                ////show_message("1 found at " + string(i+6))
                k = 0
                //character at i+9 will be the first number of the x location
                j = j+9
                while(k &lt; 2){
                    substring = ""
                    while(true){//while(string_char_at(fulltext, j) != "."){ //just go forever
                        if(string_char_at(fulltext, j) == ","){ //no more numbers
                            ////show_message("comma found at " + string(j) + "; substring: " + string(substring))
                            if(k == 0){
                                keeper1X = real(substring)
                            }
                            if(k == 1){
                                keeper1Y = real(substring)
                            }
                            if(k == 2){
                                keeper1DefType = real(substring)
                            }
                            if(k == 3){
                                keeper1ZoneSize = real(substring)
                            }
                            k+= 1
                            j+= 2 //move pointer to next number, which will by the y location
                            break;
                        }else{
                            ////show_message("#: " + string_char_at(fulltext, j))
                            substring += string_char_at(fulltext, j)
                        }
                        j+= 1
                    }
                }
                //show_message("keeper1: " + string(keeper1X) + "," + string(keeper1Y) + "," + string(keeper1DefType) + "," + string(keeper1ZoneSize))
                j -= 9
                //show_message("Remaining string: " + string_copy(fulltext, j, string_length(fulltext)-1))
            }
        }
        if(string_char_at(fulltext, j) == "b"){
            substring = ""
            //beater
            if(string_char_at(fulltext, j+6) == "1"){
                ////show_message("1 found at " + string(i+6))
                k = 0
                //character at i+9 will be the first number of the x location
                j = j+9
                while(k &lt; 2){
                    substring = ""
                    while(true){//while(string_char_at(fulltext, j) != "."){ //just go forever
                        if(string_char_at(fulltext, j) == ","){ //no more numbers
                            ////show_message("comma found at " + string(j) + "; substring: " + string(substring))
                            if(k == 0){
                                beater1X = real(substring)
                            }
                            if(k == 1){
                                beater1Y = real(substring)
                            }
                            if(k == 2){
                                beater1DefType = real(substring)
                            }
                            if(k == 3){
                                beater1ZoneSize = real(substring)
                            }
                            k+= 1
                            j+= 2 //move pointer to next number, which will by the y location
                            break;
                        }else{
                            ////show_message("#: " + string_char_at(fulltext, j))
                            substring += string_char_at(fulltext, j)
                        }
                        j+= 1
                    }
                }
                //show_message("beater1: " + string(beater1X) + "," + string(beater1Y) + "," + string(beater1DefType) + "," + string(beater1ZoneSize))
                j -= 9
                //show_message("Remaining string: " + string_copy(fulltext, j, string_length(fulltext)-1))
            }
            
            if(string_char_at(fulltext, j+6) == "2"){
                ////show_message("1 found at " + string(i+6))
                k = 0
                //character at i+9 will be the first number of the x location
                j = j+9
                while(k &lt; 2){
                    substring = ""
                    while(true){//while(string_char_at(fulltext, j) != "."){ //just go forever
                        if(string_char_at(fulltext, j) == ","){ //no more numbers
                            ////show_message("comma found at " + string(j) + "; substring: " + string(substring))
                            if(k == 0){
                                beater2X = real(substring)
                            }
                            if(k == 1){
                                beater2Y = real(substring)
                            }
                            if(k == 2){
                                beater2DefType = real(substring)
                            }
                            if(k == 3){
                                beater2ZoneSize = real(substring)
                            }
                            k+= 1
                            j+= 2 //move pointer to next number, which will by the y location
                            break;
                        }else{
                            ////show_message("#: " + string_char_at(fulltext, j))
                            substring += string_char_at(fulltext, j)
                        }
                        j+= 1
                    }
                }
                //show_message("beater2: " + string(beater2X) + "," + string(beater2Y) + "," + string(beater2DefType) + "," + string(beater2ZoneSize))
                break;
            }
        }
    }
}

file_text_close(file)

if room == rm_playmaker or room == rm_playmaker_alt or room == rm_offense or room == rm_offense_alt{
    with obj_player_position{ //clears old starters to make room for possible changes, prevents duplicates
        instance_destroy()
    }
    for(i = 0; i &lt; 7; i += 1){
        if obj_controller.charray[i, 11] == 1 {
                if global.chasers == 0 {
                    //action_create_object_motion(obj_player_position, obj_controller.charray[0, 1]*xmodifier+xintercept, obj_controller.charray[0, 2]*ymodifier, obj_controller.charray[i, 0], 0) //place in relative position based on where it would be on the actual pitch
                    with(action_create_object_motion(obj_player_position, chaser1X*xmodifier+xintercept, chaser1Y*ymodifier, obj_controller.charray[i,0], 0)){
                        zonesize = chaser1ZoneSize
                        strategy = chaser1DefType
                        self_id = obj_controller.charray[i, 0]
                        st_position = 1
                        //position_id = 0
                        //scr_players()
                    }
                    global.chasers = 1
                    continue
                    }
                if global.chasers == 1 {
                    //action_create_object_motion(obj_player_position, obj_controller.charray[1, 1]*xmodifier+xintercept, obj_controller.charray[1, 2]*ymodifier, obj_controller.charray[i, 0], 0)
                    with(action_create_object_motion(obj_player_position, chaser2X*xmodifier+xintercept, chaser2Y*ymodifier, obj_controller.charray[i,0], 0)){
                        zonesize = chaser2ZoneSize
                        strategy = chaser2DefType
                        self_id = obj_controller.charray[i, 0]
                        st_position = 1
                        //position_id = 1
                        scr_players()
                    }
                    global.chasers = 2
                    continue
                    }
                if global.chasers == 2 and global.playeroption == 7{
                    //action_create_object_motion(obj_player_position, obj_controller.charray[2, 1]*xmodifier+xintercept, obj_controller.charray[2, 2]*ymodifier, obj_controller.charray[i, 0], 0)
                    with(action_create_object_motion(obj_player_position, chaser3X*xmodifier+xintercept, chaser3Y*ymodifier, obj_controller.charray[i,0], 0)){
                        zonesize = chaser3ZoneSize
                        strategy = chaser3DefType
                        self_id = obj_controller.charray[i, 0]
                        st_position = 1
                        //position_id = 2
                        scr_players()
                    }
                    global.chasers = 3
                    continue
                    }
                /*
                if global.chasers == 3 {
                    action_create_object_motion(obj_player_position, 32, 96, obj_controller.charray[i,0], 0)
                    global.chasers = 4
                    continue
                    }
                if global.chasers == 4 {
                    action_create_object_motion(obj_player_position, 96, 96, obj_controller.charray[i,0], 0)
                    global.chasers = 5
                    continue
                    }
                if global.chasers == 5 {
                    action_create_object_motion(obj_player_position, 160, 96, obj_controller.charray[i,0], 0)
                    global.chasers = 6
                    continue
                    }*/
            }
        if obj_controller.charray[i, 11] == 2{
            if global.keepers &lt; 1{
                if global.playeroption == 7{
                    //action_create_object_motion(obj_player_position, obj_controller.charray[3, 1]*xmodifier+xintercept, obj_controller.charray[3, 2]*ymodifier, obj_controller.charray[i,0], 0)
                }
                if global.playeroption == 5{
                //action_create_object_motion(obj_player_position, obj_controller.charray[2, 1]*xmodifier+xintercept, obj_controller.charray[2, 2]*ymodifier, obj_controller.charray[i,0], 0)
                }
                with(action_create_object_motion(obj_player_position, keeper1X*xmodifier+xintercept, keeper1Y*ymodifier, obj_controller.charray[i,0], 0)){
                        zonesize = keeper1ZoneSize
                        strategy = keeper1DefType
                        self_id = obj_controller.charray[i, 0]
                        st_position = 2
                        //position_id = 0
                        scr_players()
                }
                global.keepers = 1
                continue
            }else{
                /*
                action_create_object_motion(obj_player_position, 224, 96, obj_controller.charray[i,0], 0)
                global.keepers = 2*/
                continue
                }
            }
        if obj_controller.charray[i, 11] == 3{
                if global.beaters == 0{
                    if global.playeroption == 7{
                        //action_create_object_motion(obj_player_position, obj_controller.charray[4, 1]*xmodifier+xintercept, obj_controller.charray[4, 2]*ymodifier, obj_controller.charray[i,0], 0)
                    }
                    if global.playeroption == 5{
                        //action_create_object_motion(obj_player_position, obj_controller.charray[3, 1]*xmodifier+xintercept, obj_controller.charray[3, 2]*ymodifier, obj_controller.charray[i,0], 0)
                    }
                    with(action_create_object_motion(obj_player_position, beater1X*xmodifier+xintercept, beater1Y*ymodifier, obj_controller.charray[i,0], 0)){
                        zonesize = beater1ZoneSize
                        strategy = beater1DefType
                        self_id = obj_controller.charray[i, 0]
                        st_position = 3
                        //position_id = 0
                        scr_players()
                    }
                    global.beaters = 1
                    continue
                    }
                if global.beaters == 1 and global.playeroption == 7{
                    //action_create_object_motion(obj_player_position, obj_controller.charray[5, 1]*xmodifier+xintercept, obj_controller.charray[5, 2]*ymodifier, obj_controller.charray[i,0], 0)
                    with(action_create_object_motion(obj_player_position, beater2X*xmodifier+xintercept, beater2Y*ymodifier, obj_controller.charray[i,0], 0)){
                        zonesize = beater2ZoneSize
                        strategy = beater2DefType
                        self_id = obj_controller.charray[i, 0]
                        st_position = 3
                        //position_id = 1
                        scr_players()
                    }
                    global.beaters = 2
                    continue
                    }
                /*if global.beaters == 2{
                    action_create_object_motion(obj_player_position, 64, 128, obj_controller.charray[i,0], 0)
                    global.beaters = 3
                    continue
                    }
                if global.beaters == 3{
                    action_create_object_motion(obj_player_position, 128, 128, obj_controller.charray[i,0], 0)
                    global.beaters = 4
                    continue
                    }*/
                }
        if obj_controller.charray[i, 11] == 4  {
            if global.seekers &lt; 1{
                if global.playeroption == 7{
                    action_create_object_motion(obj_player_position, obj_controller.charray[6, 1]*xmodifier+xintercept, obj_controller.charray[6, 2]*ymodifier, obj_controller.charray[i,0], 0)
                }
                if global.playeroption == 5{
                    action_create_object_motion(obj_player_position, obj_controller.charray[5, 1]*xmodifier+xintercept, obj_controller.charray[5, 2]*ymodifier, obj_controller.charray[i,0], 0)
                }
                global.seekers = 1
                continue
            }else{
                /*
                action_create_object_motion(obj_player_position, 192, 128, obj_controller.charray[i,0], 0)
                global.seekers = 2
                continue*/
                }
            }
    } 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="3">
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>visible</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>true</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>801</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_cursor</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>5</kind>
            <sprite>spr_cursor</sprite>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self()
draw_set_color(c_black)
draw_set_halign(fa_left)
draw_set_valign(fa_top)
draw_set_font(fnt_card)
if(room == rm_playmaker or room == rm_playmaker_alt){
    draw_text(x, y, "D-Preset" + string(presetindex))
}else{
    draw_text(x, y, "O-Preset" + string(presetindex))
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
