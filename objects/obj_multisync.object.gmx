<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>used to sync multiplayer data</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//mplay_data_write(ind,val) //write value val (string or real) into location ind (ind between 0 and 1000000).
//mplay_data_read(ind) //returns the value in location ind (ind between 0 and 1000000). Initially all values are 0.

//mplay_data_mode(true) //player locations, ball locations.
/*
mplay_data_write(0, -1) //team1_player1 x
mplay_data_write(0, -1) //team1_player1 y
mplay_data_write(0, -1) //team1_player1 direction
mplay_data_write(0, -1) //team1_player1 AI (controlled by player, or controlled by AI)
mplay_data_write(0, -1) //team2_player1 x
mplay_data_write(0, -1) //team2_player1 y
mplay_data_write(0, -1) //team2_player1 direction
mplay_data_write(0, -1) //team2_player1 AI (controlled by player, or controlled by AI)
mplay_data_write(0, -1) //team 1 name
mplay_data_write(0, -1) //team 2 name
mplay_data_write(0, -1) //team 1 color
mplay_data_write(0, -1) //team 2 color
mplay_data_write(0, -1) //team 1 color secondary
mplay_data_write(0, -1) //team 2 color secondary
mplay_data_write(0, -1) //team 1 logo
mplay_data_write(0, -1) //team 2 logo
mplay_data_write(0, -1) //global.ballx
mplay_data_write(0, -1) //global.bally
mplay_data_write(0, -1) //quaffle x
mplay_data_write(0, -1) //quaffle y
mplay_data_write(0, -1) //bludger1 x; -1 if held
mplay_data_write(0, -1) //bludger1 y; -1 if held
mplay_data_write(0, -1) //bludger2 x; -1 if held
mplay_data_write(0, -1) //bludger2 y; -1 if held
mplay_data_write(0, -1) //bludger3 x; -1 if held
mplay_data_write(0, -1) //bludger3 y; -1 if held
//will require bludgers to search the data for open location, then place self into first open location
mplay_data_write(0, -1) //snitch x
mplay_data_write(0, -1) //snitch y
mplay_data_write(0, -1) //snitch status
mplay_data_write(0, -1) //seeker1x
mplay_data_write(0, -1) //seeker1y
mplay_data_write(0, -1) //seeker2x
mplay_data_write(0, -1) //seeker2y
mplay_data_write(0, -1) //left baby hoop status
mplay_data_write(0, -1) //left middle hoop status
mplay_data_write(0, -1) //left smedium hoop status
mplay_data_write(0, -1) //right baby hoop status
mplay_data_write(0, -1) //right smedium hoop status
mplay_data_write(0, -1) //right middle hoop status
mplay_data_write(0, -1) //team1_player1 x
mplay_data_write(0, -1) //team1_player1 y
mplay_data_write(0, -1) //team1_player1 direction
mplay_data_write(0, -1) //team1_player1 AI (controlled by player, or controlled by AI)

mplay_data_write(0, -1) //team1_player1 position
mplay_data_write(0, -1) //team1_player1 face ID
mplay_data_write(0, -1) //team1_player1 gender
mplay_data_write(0, -1) //team1_player1 height
mplay_data_write(0, -1) //team1_player1 weight
mplay_data_write(0, -1) //team1_player1 posession (holding ball or not)

//and so on, up to team2_player7


mplay_data_mode(false) //for not-so-important values; all other global variables; */
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*mplay_data_mode(true)

if(global.host == 1){
    mplay_data_write(0, obj_player_test.x) //team1_player1 x
    mplay_data_write(1, obj_player_test.y) //team1_player1 y
    mplay_data_write(2, obj_player_test.direction) //team1_player1 direction
    mplay_data_write(3, -1) //team1_player1 AI (controlled by player, or controlled by AI)
    
    with(obj_player2){
        x = mplay_data_read(4)
        y = mplay_data_read(5)
        direction = mplay_data_read(6)
        }
}

if(global.host == 0){
    mplay_data_write(4, obj_player2.x) //team2_player1 x
    mplay_data_write(5, obj_player2.y) //team2_player1 y
    mplay_data_write(6, obj_player2.direction) //team2_player1 direction
    mplay_data_write(7, -1) //team2_player1 AI (controlled by player, or controlled by AI)

    with(obj_player_test){
        x = mplay_data_read(0)
        y = mplay_data_read(1)
        direction = mplay_data_read(2)
        }
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
