<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_button_simulate</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="6" enumb="11">
      <action>
        <libid>1</libid>
        <id>801</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_cursor</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>5</kind>
            <sprite>spr_cursor2</sprite>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>211</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>snd_click</sound>
          </argument>
          <argument>
            <kind>3</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>global.host</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>1</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_bench_team2</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize()

persona_name = "Client Persona Name"

chaserCount = 0
keeperCount = 0
beaterCount = 0
seekerCount = 0

ch_name = 1
st_speed = 1
st_power = 1
st_throw = 1
st_accuracy = 1
st_stamina = 1
st_catching = 1
st_grip = 1
st_gender = 0
//0 = other, 1 = female, 2 = male
st_position = 1
//1 = chaser, 2 = keeper, 3 = beater, 4 = seeker, 0 = utility
ch_hair = c_white

depth = x-y
bench_color = c_white
if(room == rm_alt){
    //bench_color = global.team1_color
}
if(room == rm_tutorial_alt){
    exit
}
bench_array[0] = -1
bench_color[0] = c_white
bench_sprites[0] = -1
self_id = 0
skin_array[0] = -1
sprite_head = 0
bench_ids[0] = -1
for(i = 0; i &lt; 7; i+= 1){ //fill initial list with empty spaces
    skin_array[i] = -1
    bench_sprites[i] = -1
    bench_id[i] = -1
}

//fills bench with random players

i = 0
while(i &lt; 14){
    randomize()
    self_id = irandom(global.player_max-1)
    bench_id[i] = self_id
    scr_players() //set stats (and POSITION to whatever is at self_id.
                  //We want to generate a set of 7 players for each position
    duplicate = false
    for(k = 0; k &lt; i; k+= 1){
        if(bench_id[i] == bench_id[k]){
            duplicate = true
        }
    }
    if(duplicate == true){
        continue
    }
    if(st_position == 1){
        if(chaserCount &lt; 6){
            if(chaserCount &lt; 3){
                scr_add_client_list(chaserCount, self_id, 1) //adds to the client list, first 7 players will be played with on pitch
                //first 3 slots should be chasers [0-2]
            }
            chaserCount += 1
        }else{
            //i -= 1;
            continue;
        }
    }
    if(st_position == 2){
        if(keeperCount &lt; 2){
            if(keeperCount &lt; 1){
                scr_add_client_list(keeperCount+3, self_id, 1) //adds to the client list, first 7 players will be played with on pitch
                //4th slot should be keeper [3]
            }
            keeperCount += 1
        }else{
            //i -= 1;
            continue;
        }
    }
    if(st_position == 3){
        if(beaterCount &lt; 4){
            if(beaterCount &lt; 2){
                scr_add_client_list(beaterCount+4, self_id, 1) //adds to the client list, first 7 players will be played with on pitch
                //5th and 6th slot should be beaers [4-5]
            }
            beaterCount += 1
        }else{
            //i -= 1;
            continue;
        }
    }
    if(st_position == 4){
        if(seekerCount &lt; 2){
            if(beaterCount &lt; 2){
                scr_add_client_list(seekerCount+6, self_id, 1) //adds to the client list, first 7 players will be played with on pitch
                //7th slot should be seeker [6]
            }
            seekerCount += 1
        }else{
            //i -= 1;
            continue;
        }
    }
    //draw_sprite_ext(sprite_head, argument1, argument2, argument3, argument4, argument5, argument6, argument7, argument8)
    //bench_sprites[i] = scr_load_smallheads(irandom(global.player_max))
    scr_load_smallheads(self_id) //sets sprite head to self_id
    //bench_sprites[i] = sprite_add(working_directory+"\player_heads\spr_player"+string(self_id+1)+"_head_strip8.png", 8, true, false, 16, 24)
    //bench_sprites[i] = sprite_add(working_directory+"\player_heads\spr_player"+string(irandom(self_id)+1)+"_head_strip8.png", 8, true, false, 16, 24)
    bench_sprites[i] = sprite_head
    //bench_sprites[i] = scr_load_smallheads(5)
    skin_array[i] = scr_getskin(-1)
    bench_color[i] = choose(global.team1_color, global.team2_color) //depending on wins/losses should have more of team1 color
    /*if(irandom(5) == 1 or global.wins+global.losses == 0){
        bench_color[i] = make_color_rgb(irandom(255), irandom(255), irandom(255))
    }else{
        if global.losses &gt; 0 and global.wins &gt; 0{
            if random(1) &gt; (global.wins/(global.wins+global.losses)){
                bench_color[i] = global.team2_color
            }else{
                bench_color[i] = global.team1_color
            }
        }
        if global.wins == 0{
            bench_color[i] = make_color_rgb(irandom(255), irandom(255), irandom(255))
        }
        
    }*/
    
    /*if(irandom(12)-1 &gt; global.wins){
        skin_array[i] = -1 //draw blank space
        bench_id[i] = -1
    }*/
    i += 1
}

for(i = 0; i &lt; 7; i += 1){
    //bench_sprites[i] = scr_load_smallheads(bench_array[i])
}

//REPLACE
//Fills with player 1's array, should grab player 2's array

//obj_controller.charray[i, 0] = self_id
//obj_controller.charray[i, 1] = tetherX1 &lt;--- po_dx, defensive X position
//obj_controller.charray[i, 2] = tetherY1 &lt;--- po_dy, defensive Y position
//obj_controller.charray[i, 3] = tetherX2 &lt;--- legacy, not used
//obj_controller.charray[i, 4] = tetherY2 &lt;--- legacy, not used
//obj_controller.charray[i, 5] = strategy &lt;--- zone, point, or man to man
//obj_controller.charray[i, 6] = manStrategy &lt;--- legacy
//obj_controller.charray[i, 7] = zone &lt;--- if past a certain x or y value, attack
//obj_controller.charray[i, 8] = zonesize &lt;--- if past a certain radius, attack
//obj_controller.charray[i, 9] = seeker_catch
//obj_controller.charray[i, 10] = seeker_defend
//obj_controller.charray[i, 11] = st_position
//obj_controller.charray[i, 12] = x/y starting location (for brooms up phase)
//obj_controller.charray[i, 13] = po_ox
//obj_controller.charray[i, 14] = po_oy
//obj_controller.charray[i, 15] = go_broomsup
//obj_controller.charray[i, 16] = ??? &lt;--- not used I think
//obj_controller.charray[i, 17] = po_withball &lt;--- how far beaters will go when they have a bludger
//obj_controller.charray[i, 18] = po_noball &lt;--- how far beaters go when they don't have a bludger

//Following code should be replaced with code to grab the opponent's charray[] data and place it into client_charray
//so that players can line up correctly. X and Y values are flipped so that the player can set up the strategy like usual
//but the players will line up on the opposite side of the pitch.

for(i = 0; i &lt; 15; i+= 1){
    for(j = 0; j &lt; 19; j+= 1){
        obj_controller.client_charray[i, j] = obj_controller.charray[i, j] //CHANGE THIS. Sets to team1's charray for now (but flipped for other pitch)
        if(global.threedmode == true){
            if(j == 1 or j == 3 or j == 7 or j == 13 or j == 17 or j == 18){
                obj_controller.client_charray[i, j] = scr_flip_coordinate_x(2400, obj_controller.client_charray[i, j])
                //or //client_charray[i, j] = scr_flip_coordinate_x(client_charray[i, j])
            }
            if(j == 2 or j == 4 or j == 14){
                //y value doesn't flip for global.threedmode
            }
        }else{
            if(j == 1 or j == 3 or j == 7 or j == 13){
                obj_controller.client_charray[i, j] = scr_flip_coordinate_x(600, obj_controller.client_charray[i, j])
                //or //client_charray[i, j] = scr_flip_coordinate_x(client_charray[i, j])
            }
            if(j == 2 or j == 4 or j == 17 or j == 18){
                obj_controller.client_charray[i, j] = scr_flip_coordinate_y(750, obj_controller.client_charray[i, j])
            }
        }
    }
}

//put players on team that are pictured on the bench

for(i = 0; i &lt; 14; i+= 1){
    obj_controller.client_charray[i, 0] = bench_id[i]
}

depth = -y
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>421</id>
        <kind>3</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_bench_team1</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize()

persona_name = "[Host Persona Name]"

chaserCount = 0
keeperCount = 0
beaterCount = 0
seekerCount = 0

ch_name = 1
st_speed = 1
st_power = 1
st_throw = 1
st_accuracy = 1
st_stamina = 1
st_catching = 1
st_grip = 1
st_gender = 0
//0 = other, 1 = female, 2 = male
st_position = 1
//1 = chaser, 2 = keeper, 3 = beater, 4 = seeker, 0 = utility
ch_hair = c_white

depth = x-y
bench_color = c_white
if(room == rm_alt){
    //bench_color = global.team1_color
}
if(room == rm_tutorial_alt){
    exit
}
bench_array[0] = -1
bench_color[0] = c_white
bench_sprites[0] = -1
self_id = 0
skin_array[0] = -1
sprite_head = 0
bench_ids[0] = -1
for(i = 0; i &lt; 7; i+= 1){ //fill initial list with empty spaces
    skin_array[i] = -1
    bench_sprites[i] = -1
    bench_id[i] = -1
}
i = 0
while(i &lt; 14){
    randomize()
    self_id = irandom(global.player_max-1)
    bench_id[i] = self_id
    scr_players() //set stats (and POSITION to whatever is at self_id.
                  //We want to generate a set of 7 players for each position
    duplicate = false
    for(k = 0; k &lt; i; k+= 1){
        if(bench_id[i] == bench_id[k]){
            duplicate = true
        }
    }
    if(duplicate == true){
        continue
    }
    if(st_position == 1){
        if(chaserCount &lt; 6){
            if(chaserCount &lt; 3){
                scr_add_client_list(chaserCount, self_id, 1) //adds to the client list, first 7 players will be played with on pitch
                //first 3 slots should be chasers [0-2]
            }
            chaserCount += 1
        }else{
            //i -= 1;
            continue;
        }
    }
    if(st_position == 2){
        if(keeperCount &lt; 2){
            if(keeperCount &lt; 1){
                scr_add_client_list(keeperCount+3, self_id, 1) //adds to the client list, first 7 players will be played with on pitch
                //4th slot should be keeper [3]
            }
            keeperCount += 1
        }else{
            //i -= 1;
            continue;
        }
    }
    if(st_position == 3){
        if(beaterCount &lt; 4){
            if(beaterCount &lt; 2){
                scr_add_client_list(beaterCount+4, self_id, 1) //adds to the client list, first 7 players will be played with on pitch
                //5th and 6th slot should be beaers [4-5]
            }
            beaterCount += 1
        }else{
            //i -= 1;
            continue;
        }
    }
    if(st_position == 4){
        if(seekerCount &lt; 2){
            if(beaterCount &lt; 2){
                scr_add_client_list(seekerCount+6, self_id, 1) //adds to the client list, first 7 players will be played with on pitch
                //7th slot should be seeker [6]
            }
            seekerCount += 1
        }else{
            //i -= 1;
            continue;
        }
    }
    //draw_sprite_ext(sprite_head, argument1, argument2, argument3, argument4, argument5, argument6, argument7, argument8)
    //bench_sprites[i] = scr_load_smallheads(irandom(global.player_max))
    scr_load_smallheads(self_id) //sets sprite head to self_id
    //bench_sprites[i] = sprite_add(working_directory+"\player_heads\spr_player"+string(self_id+1)+"_head_strip8.png", 8, true, false, 16, 24)
    //bench_sprites[i] = sprite_add(working_directory+"\player_heads\spr_player"+string(irandom(self_id)+1)+"_head_strip8.png", 8, true, false, 16, 24)
    bench_sprites[i] = sprite_head
    //bench_sprites[i] = scr_load_smallheads(5)
    skin_array[i] = scr_getskin(-1)
    bench_color[i] = choose(global.team1_color, global.team2_color) //depending on wins/losses should have more of team1 color
    /*if(irandom(5) == 1 or global.wins+global.losses == 0){
        bench_color[i] = make_color_rgb(irandom(255), irandom(255), irandom(255))
    }else{
        if global.losses &gt; 0 and global.wins &gt; 0{
            if random(1) &gt; (global.wins/(global.wins+global.losses)){
                bench_color[i] = global.team2_color
            }else{
                bench_color[i] = global.team1_color
            }
        }
        if global.wins == 0{
            bench_color[i] = make_color_rgb(irandom(255), irandom(255), irandom(255))
        }
        
    }*/
    
    /*if(irandom(12)-1 &gt; global.wins){
        skin_array[i] = -1 //draw blank space
        bench_id[i] = -1
    }*/
    i += 1
}

for(i = 0; i &lt; 7; i += 1){
    //bench_sprites[i] = scr_load_smallheads(bench_array[i])
}

depth = -y
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="3">
      <action>
        <libid>1</libid>
        <id>801</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_cursor</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>5</kind>
            <sprite>spr_cursor</sprite>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
